<%- include("../../views/partials/admin/header.ejs") %>

<style>
    .category-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--purple-light);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
    }

    .category-actions a, .category-actions button {
        margin-right: 10px;
    }

    .add-category-btn {
        background-color: var(--purple-light);
        color: white;
    }

    .subcategories-btn {
        background-color: #4caf50;
        color: white;
    }

    .search-container .search-btn {
        background-color: var(--purple-light);
        color: white;
    }

    .clear-btn {
        background-color: #d33;
        color: white;
        border: none;
    }

    /* Table Styling */
    .table {
        border-collapse: separate;
        border-spacing: 0;
    }

    body:not(.light-mode) .table {
        --bs-table-bg: var(--gray-dark);
        --bs-table-color: white;
        --bs-table-hover-bg: #2c2c2c;
        --bs-table-border-color: rgba(255, 255, 255, 0.1);
    }

    body.light-mode .table {
        --bs-table-bg: var(--gray-light);
        --bs-table-color: var(--text-light);
        --bs-table-hover-bg: #e0e0e0;
        --bs-table-border-color: rgba(0, 0, 0, 0.1);
    }

    body:not(.light-mode) .table th {
        background-color: var(--gray-dark);
        color: white;
        font-weight: 600;
        text-transform: uppercase;
        padding: 12px 15px;
        border-bottom: 2px solid var(--purple-light);
    }

    body.light-mode .table th {
        background-color: var(--gray-light);
        color: var(--text-light);
        font-weight: 600;
        text-transform: uppercase;
        padding: 12px 15px;
        border-bottom: 2px solid var(--purple-light);
    }

    .table td {
        padding: 12px 15px;
        vertical-align: middle;
        border-bottom: 1px solid var(--bs-table-border-color);
    }

    .table tbody tr:hover {
        background-color: var(--bs-table-hover-bg);
    }

    /* Fix for table hover in light mode */
    body.light-mode .table-hover tbody tr:hover {
        background-color: #e0e0e0 !important;
        color: var(--text-light) !important;
    }

    body.light-mode .table-hover tbody tr:hover td {
        background-color: #e0e0e0 !important; 
        color: var(--text-light) !important;
    }

    /* Ensure text remains visible during transition */
    .table tbody tr {
        transition: background-color 0.3s ease;
    }

    /* Force text color to remain appropriate for the theme on hover */
    body.light-mode .table tbody tr:hover td,
    body.light-mode .table tbody tr:hover th {
        color: var(--text-light) !important;
    }

    body:not(.light-mode) .table tbody tr:hover td,
    body:not(.light-mode) .table tbody tr:hover th {
        color: white !important;
    }

    /* Pagination Styling */
    .pagination .page-item.active .page-link {
        background-color: var(--purple-light) !important;
        border-color: var(--purple-light) !important;
        color: white !important;
    }

    /* Search Bar Styling */
    .search-container input.form-control {
        color: rgb(7, 7, 7);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    body.light-mode .search-container input.form-control {
        background-color: #ffffff; 
        color: var(--text-light);
        border: 1px solid #ced4da; 
    }

    /* Text color adaptation based on theme */
    body:not(.light-mode) h2 {
        color: white;
    }

    body.light-mode h2 {
        color: var(--text-light);
    }

    /* Fix: Override text-white class in light mode */
    body.light-mode .text-white {
        color: var(--text-light) !important;
    }

    /* Search container styles */
    .search-container {
        display: flex;
        justify-content: flex-start;
    }

    .search-btn, .clear-btn {
        margin-left: 10px; 
        border-radius: 5px; 
    }

</style>

<div class="container-fluid p-4">
    <div class="row mb-3 align-items-center">
        <div class="col-md-6">
            <h2 class="text-white">Categories</h2>
        </div>
        <div class="col-md-6 text-end">
            <a href="/admin/addCategory" class="btn add-category-btn">
                <i class="bi bi-plus"></i> Add Category
            </a>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="search-container d-flex">
                <form action="/admin/category" class="d-flex w-100">
                    <input type="text" id="searchInput" class="form-control" name="search" placeholder="Search categories..." value="">
                    <button type="submit" id="searchButton" class="btn search-btn ms-2">
                        <i class="bi bi-search"></i>
                    </button>
                    <a href="/admin/category" class="btn clear-btn ms-2">
                        Clear
                    </a>
                </form>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>NAME</th>
                    <th>DESCRIPTION</th>
                    <th>STATUS</th>
                    <th>List/Unlist</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody id="categoryTableBody">
                <% cat.forEach((category, index) => { %>
                <tr>
                    <td><%= category.name %></td>
                    <td><%= category.description %></td>
                    <td>
                        <% if(category.isListed) { %>
                            <span class="badge bg-success" style="width: 60px">Listed</span>
                        <% } else { %>
                            <span class="badge bg-danger" style="width: 60px">Unlisted</span>
                        <% } %>
                    </td>

                    <td class="text-start">
                        <%if(category.isListed){%>
                        <button class="btn btn-danger" style="width: 70px" onclick="confirmListCategory('<%= category._id %>')">
                            Unlist
                        </button>
                        <%}else{%>
                        <button class="btn btn-success" style="width: 70px" onclick="confirmUnlistCategory('<%= category._id %>')">
                            List
                        </button>
                        <%}%>
                    </td>

                    <td class="category-actions">
                        <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-sm btn-primary">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <button class="btn btn-sm btn-danger" onclick="confirmDeleteCategory('<%= category._id %>')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
                <% }) %>
            </tbody>
        </table>

        <div class="container mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center mb-20">
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    function confirmUnlistCategory(categoryId) {

        // Check if dark mode is active
        const isDarkMode = !document.body.classList.contains('light-mode');

    Swal.fire({
        title: 'Are you sure?',
        text: "You want to list this category. This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, list it!',

        // Add these properties for dark mode support
        background: isDarkMode ? '#2c2c2c' : '#fff',
        color: isDarkMode ? '#ffffff' : '#000000'

    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/unlistCategory?id=${categoryId}`, {
                method: 'GET'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Listed!',
                        'The category has been listed.',
                        'success'
                    ).then(() => {
                        location.reload();  
                    });
                } else {
                    Swal.fire(
                        'Error!',
                        data.message || 'Something went wrong!',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'Failed to list the category.',
                    'error'
                );
            });
        }
    });
}

function confirmListCategory(categoryId) {

    // Check if dark mode is active
    const isDarkMode = !document.body.classList.contains('light-mode');

    Swal.fire({
        title: 'Are you sure?',
        text: "You want to unlist this category. This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, unlist it!',

        // Add these properties for dark mode support
        background: isDarkMode ? '#2c2c2c' : '#fff',
        color: isDarkMode ? '#ffffff' : '#000000'

    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/listCategory?id=${categoryId}`, {
                method: 'GET'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Unlisted!',
                        'The category has been unlisted.',
                        'success'
                    ).then(() => {
                        location.reload();  
                    });
                } else {
                    Swal.fire(
                        'Error!',
                        data.message || 'Something went wrong!',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'Failed to unlist the category.',
                    'error'
                );
            });
        }
    });
}

    function confirmDeleteCategory(categoryId) {

        // Check if dark mode is active
        const isDarkMode = !document.body.classList.contains('light-mode');

        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',

            // Add these properties for dark mode support
            background: isDarkMode ? '#2c2c2c' : '#fff',
            color: isDarkMode ? '#ffffff' : '#000000'

        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/deleteCategory/${categoryId}`, { method: 'PATCH' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'The category has been soft deleted.', 'success')
                                .then(() => location.reload());
                        } else {
                            Swal.fire('Error!', data.message || 'Something went wrong!', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Error!', 'Failed to delete the category.', 'error');
                    });
            }
        });
    }
</script>

<%- include("../../views/partials/admin/footer.ejs") %>
