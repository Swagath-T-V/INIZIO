<%- include("../../views/partials/admin/header.ejs") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    :root {
        --bg-light: #ffffff;
        --text-light: #333333;
        --bg-dark: #121212;
        --text-dark: #ffffff;
        --purple-light: #8a3fff;
        --purple-dark: #ab66ff;
        --gray-light: #f4f4f4;
        --gray-dark: #1e1e1e;
    }

    html, body {
        height: 100%;
    }

    body {
        background-color: var(--bg-dark);
        color: var(--text-dark);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    body.light-mode {
        background-color: var(--bg-light);
        color: var(--text-light);
    }

    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-track {
        background: var(--gray-dark);
    }

    ::-webkit-scrollbar-thumb {
        background: var(--purple-light);
        border-radius: 4px;
    }

    body.light-mode ::-webkit-scrollbar-track {
        background: var(--gray-light);
    }

    .content-main {
        padding: 0;
        transition: all 0.3s ease;
    }

    .content-title {
        margin-bottom: 20px;
        font-weight: bold;
        text-align: center;
        transition: color 0.3s ease;
        color: white; 
    }

    body.light-mode .content-title {
        color: black;
    }

    .card {
        background-color: var(--gray-dark);
        border-radius: 10px;
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        margin-bottom: 20px;
        overflow: hidden;
    }

    body.light-mode .card {
        background-color: var(--bg-light);
        color: var(--text-light); 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background-color: rgba(138, 63, 255, 0.1);
        border-bottom: 1px solid rgba(138, 63, 255, 0.2);
        padding: 15px 20px;
        font-weight: bold;
        color: var(--text-dark);
        transition: color 0.3s ease;
    }

    .card-body {
        padding: 20px;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 8px;
        color: var(--text-dark);
        transition: color 0.3s ease;
    }

    body.light-mode .form-label {
        color: var(--text-light);
    }

    .form-control, .form-select {
        background-color: var(--bg-dark);
        border: 1px solid #333;
        color: var(--text-dark);
        padding: 10px 15px;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

    body.light-mode .form-control, 
    body.light-mode .form-select {
        background-color: var(--bg-light);
        border: 1px solid #ddd;
        color: var(--text-light);
    }

    .form-control:focus, 
    .form-select:focus {
        border-color: var(--purple-light);
        box-shadow: 0 0 0 3px rgba(138, 63, 255, 0.2);
    }

    .btn {
        background-color: var(--purple-light);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn:hover {
        background-color: var(--purple-dark);
        transform: translateY(-2px);
    }

    .error-message {
        color: #ff4d4d;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .thumbnails-container {
        display: flex;
        overflow-x: auto;
        padding: 15px;
        gap: 10px;
        background-color: rgba(138, 63, 255, 0.05);
        border-radius: 6px;
        min-height: 120px;
    }

    .thumbnail {
        position: relative;
        border-radius: 6px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .thumbnail img {
        object-fit: cover;
        height: 100px;
        width: 100px;
        display: block;
    }

    .image-upload-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 20px;
    }

    .image-upload-card {
        border: 2px dashed var(--purple-light);
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
        min-height: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .image-upload-card:hover {
        background-color: rgba(138, 63, 255, 0.05);
    }

    .image-upload-preview {
        width: 100%;
        height: 150px;
        object-fit: contain;
        margin-bottom: 10px;
        border-radius: 6px;
        display: none;
    }

    .image-upload-label {
        cursor: pointer;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
    }

    .image-upload-icon {
        font-size: 30px;
        color: var(--purple-light);
        margin-bottom: 10px;
    }

    .card-header h5 {
        color: var(--text-dark);
        transition: color 0.3s ease;
    }

    body.light-mode .card-header h5 {
        color: var(--text-light);
    }

    .image-upload-text {
        color: var(--text-dark);
        font-size: 14px;
    }

    body.light-mode .image-upload-text {
        color: var(--text-light);
    }

    .image-upload-input {
        position: absolute;
        width: 0;
        height: 0;
        opacity: 0;
    }

    .image-upload-remove {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        display: none;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .img-container {
        max-height: 500px;
        width: 100%;
        margin: 0 auto;
    }

    .modal-content {
        background-color: var(--bg-dark);
        color: var(--text-dark);
    }

    body.light-mode .modal-content {
        background-color: var(--bg-light);
        color: var(--text-light);
    }

    .btn-close {
        filter: invert(1);
    }

    body.light-mode .btn-close {
        filter: none;
    }

    @media (max-width: 992px) {
        .image-upload-container {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @media (max-width: 768px) {
        .col-lg-6 {
            width: 100%;
        }
    }

    @media (max-width: 576px) {
        .image-upload-container {
            grid-template-columns: 1fr;
        }
    }

</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Offer</h2>
            </div>
        </div>
        <div class="col-lg-8 mx-auto">
            <div class="card mb-4">
                <div class="card-body">
                    <form  id="offerForm" onsubmit="return handleFormSubmit(event)" >
                        <div class="mb-4">
                            <label for="offerName" class="form-label">Offer Name</label>
                            <input type="text" placeholder="Type here" name="offerName" class="form-control" id="offerName">
                            <div id="offerName-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea placeholder="Type here" id="description" name="description" class="form-control" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Discount Type</label>
                                <select class="form-select" name="discountType" id="discountType">
                                    <option value="percentage">Percentage</option>
                                </select>
                                <div id="discountType-error" class="error-message"></div>
                            </div> 

                            <div class="col-md-6 mb-4">
                                <label class="form-label">Discount Amount</label>
                                <input type="number" placeholder="Enter amount" name="discountAmount" class="form-control" id="discountAmount">
                                <div id="discountAmount-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Valid From</label>
                                <input type="date" name="validFrom" class="form-control" id="validFrom">
                                <div id="validFrom-error" class="error-message"></div>
                            </div>

                            <div class="col-md-6 mb-4">
                                <label class="form-label">Valid Until</label>
                                <input type="date" name="validUpto" class="form-control" id="validUpto">
                                <div id="validUpto-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Offer Type</label>
                                <select class="form-select" name="offerType" id="offerType" onchange="updateApplicableTo()">
                                    <option value="">Select Type </option>
                                    <option value="Category">Category</option>
                                    <option value="subCategory">SubCategory</option>
                                    <option value="Product">Product</option>
                                    <option value="Brand">Brand</option>
                                </select>
                                <div id="offerType-error" class="error-message"></div>
                            </div>

                            <div class="col-md-6 mb-4">
                                <label class="form-label">Applicable To</label>
                                <select class="form-select" name="applicableTo" id="applicableTo">
                                    <!-- Options will be populated dynamically based on offerType -->
                                </select>
                                <div id="applicableTo-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <a href="/admin/offer"><button type="button" class="btn btn-secondary me-2">Cancel</button></a>
                            <button class="btn btn-primary" type="submit">Create Offer</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>


<script>

const products = <%- JSON.stringify(product) %>;
const categories = <%- JSON.stringify(category) %>;
const subCategories = <%- JSON.stringify(subCategory) %>;
const brands = <%- JSON.stringify(brand) %>;

function updateApplicableTo() {
        const offerType = document.getElementById("offerType").value;
        const applicableTo = document.getElementById("applicableTo");
        
        applicableTo.innerHTML = '<option value="">Select</option>';
        
        if (offerType === "Category") {
            categories.forEach(cat => {
                applicableTo.innerHTML += `<option value="${cat._id}">${cat.name}</option>`;
            });
        } else if (offerType === "subCategory") {
            subCategories.forEach(sub => {
                applicableTo.innerHTML += `<option value="${sub._id}">${sub.name}</option>`;
            });
        } else if (offerType === "Product") {
            products.forEach(prod => {
                applicableTo.innerHTML += `<option value="${prod._id}">${prod.name}</option>`;
            });
        }else if (offerType === "Brand") { 
            brands.forEach(brand => {
                applicableTo.innerHTML += `<option value="${brand._id}">${brand.name}</option>`;
            });
        }
    }
 
function handleFormSubmit(event){
    event.preventDefault()

    clearErrorMessages()

    if(!validateForm()){
        return false
    }

    const offerName = document.getElementById("offerName").value.trim();
    const description = document.getElementById("description").value.trim();
    const discountType = document.getElementById("discountType").value;
    const discountAmount = document.getElementById("discountAmount").value;
    const validFrom = document.getElementById("validFrom").value;
    const validUpto = document.getElementById("validUpto").value;
    const offerType = document.getElementById("offerType").value;
    const applicableTo = document.getElementById("applicableTo").value;

    const submitButton = event.target.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML = 'Saving...';
    submitButton.disabled = true;

    const relatedData ={
        offerName,
        description,
        discountType,
        discountAmount,
        validFrom,
        validUpto,
        offerType,
        applicableTo
    }

    $.ajax({
        url:'/admin/addOffer',
        method:'POST',
        data:JSON.stringify(relatedData),
        contentType:'application/json',
        success:(response)=>{
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;

            if (response.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Offer created successfully!',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/offer';
                    }
                });
            }
        },
        error:(xhr,status,error)=>{
            submitButton.innerHTML = originalText;
                submitButton.disabled = false;

                let errorMessage = 'An unexpected error occurred while saving the offer';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message; 
                }

                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: errorMessage,
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#d33'
                });
                console.error('AJAX Error:', error);

        }
    })
}
    

function validateForm() {
    
    const offerName = document.getElementById("offerName").value.trim();
    const description = document.getElementById("description").value.trim();
    const discountType = document.getElementById("discountType").value;
    const discountAmount = document.getElementById("discountAmount").value;
    const validFrom = document.getElementById("validFrom").value;
    const validUpto = document.getElementById("validUpto").value;
    const offerType = document.getElementById("offerType").value;
    const applicableTo = document.getElementById("applicableTo").value;
    
    let isValid = true;

    if (!offerName) {
                displayErrorMessage("offerName-error", "Please enter an offer name");
                isValid = false;
            } else if (offerName.length < 3) {
                displayErrorMessage("offerName-error", "Offer name must be at least 3 characters long");
                isValid = false;
            } else if (offerName.length > 20) {
                displayErrorMessage("offerName-error", "Offer name cannot exceed 20 characters");
                isValid = false;
            } else if (/^\s|\s$/.test(offerName)) {
                displayErrorMessage("offerName-error", "Offer name cannot start or end with spaces");
                isValid = false;
            } else if (/\s{2,}/.test(offerName)) {
                displayErrorMessage("offerName-error", "Offer name cannot contain multiple consecutive spaces");
                isValid = false;
            } else if (/-{2,}/.test(offerName)) {
                displayErrorMessage("offerName-error", "Offer name cannot contain multiple consecutive hyphens");
                isValid = false;
            } else if (/^-|-$/.test(offerName)) {
                displayErrorMessage("offerName-error", "Offer name cannot start or end with a hyphen");
                isValid = false;
            } else if (/[^a-zA-Z0-9\s-]/.test(offerName)) {
                displayErrorMessage("offerName-error", "Offer name can only contain letters, numbers, spaces, or hyphens");
                isValid = false;
            }

            if (!description) {
                displayErrorMessage("description-error", "Description is required");
                isValid = false;
            } else if (description.length < 5) {
                displayErrorMessage("description-error", "Description must be at least 5 characters long");
                isValid = false;
            } else if (description.length > 100) {
                displayErrorMessage("description-error", "Description cannot exceed 100 characters");
                isValid = false;
            } else if (/^\s|\s$/.test(description)) {
                displayErrorMessage("description-error", "Description cannot start or end with spaces");
                isValid = false;
            } else if (/^-|-$/.test(description)) {
                displayErrorMessage("description-error", "Description cannot start or end with a hyphen");
                isValid = false;
            } else if (/-{2,}/.test(description)) {
                displayErrorMessage("description-error", "Description cannot contain multiple consecutive hyphens");
                isValid = false;
            } else if (/[^a-zA-Z0-9\s.,!?-]/.test(description)) {
                displayErrorMessage("description-error", "Description can only contain letters, numbers, spaces, or basic punctuation");
                isValid = false;
            }

            if (!discountType) {
                displayErrorMessage('discountType-error', 'Please select a discount type');
                isValid = false;
            }

            if (!discountAmount || discountAmount <= 0) {
                displayErrorMessage('discountAmount-error', 'Please enter a valid discount amount');
                isValid = false;
            } else if (discountAmount > 100) {
                displayErrorMessage('discountAmount-error', 'Percentage discount cannot exceed 100');
                isValid = false;
            }

            const today = new Date().toISOString().split('T')[0];
            if (!validFrom) {
                displayErrorMessage('validFrom-error', 'Please select a start date');
                isValid = false;
            } else if (validFrom < today) {
                displayErrorMessage('validFrom-error', 'Start date cannot be in the past');
                isValid = false;
            }

            if (!validUpto) {
                displayErrorMessage('validUpto-error', 'Please select an end date');
                isValid = false;
            } else if (validUpto <= validFrom) {
                displayErrorMessage('validUpto-error', 'End date must be after start date');
                isValid = false;
            }

            if (!offerType) {
                displayErrorMessage('offerType-error', 'Please select an offer type');
                isValid = false;
            }

            if (!applicableTo) {
                displayErrorMessage('applicableTo-error', 'Please select an applicable item');
                isValid = false;
            }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
    });
}

</script>

<%- include("../../views/partials/admin/footer.ejs") %>