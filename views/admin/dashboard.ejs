<%- include("../../views/partials/admin/header.ejs") %>
    <style>
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--purple-light), var(--purple-dark));
            color: white;
            padding: 20px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        }

        .light-mode .stat-card {
            background: linear-gradient(135deg, #6a1b9a, #ab47bc);
            color: white;
        }

        .stat-card-icon {
            color: #7dff7d;
            font-size: 2rem;
            margin-right: 15px;
            opacity: 0.9;
        }

        .stat-card-content h3 {
            font-size: 1.1rem;
            margin-bottom: 5px;
        }

        .stat-number {
            font-size: 1.8rem;
            font-weight: bold;
        }

        /* Sales Report */
        .sales-report {
            background-color: var(--gray-dark);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .light-mode .sales-report {
            background-color: var(--gray-light);
        }

        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .report-header h2 {
            font-size: 1.5rem;
            color: var(--text-dark);
        }

        .light-mode .report-header h2 {
            color: var(--text-light);
        }

        .report-filters {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .form-select,
        .form-control {
            background-color: var(--bg-dark);
            color: var(--text-dark);
            border: 1px solid var(--purple-light);
        }

        .light-mode .form-select,
        .light-mode .form-control {
            background-color: var(--bg-light);
            color: var(--text-light);
            border: 1px solid #6a1b9a;
        }

        .btn-primary {
            background-color: var(--purple-light);
            border: none;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: var(--purple-dark);
        }

        .btn-secondary {
            background-color: #555;
            border: none;
        }

        .light-mode .btn-secondary {
            background-color: #777;
        }

        .custom-date {
            display: flex;
            gap: 10px;
        }

        .report-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .report-stat-card {
            flex: 1;
            background-color: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }

        .light-mode .report-stat-card {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .report-stat-card h4 {
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .report-stat-card p {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--purple-light);
        }

        .report-table {
            overflow-x: auto;
        }

        .table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
        }

        body:not(.light-mode) .table {
            --bs-table-bg: var(--gray-dark);
            --bs-table-color: white;
            --bs-table-hover-bg: #2c2c2c;
            --bs-table-border-color: rgba(255, 255, 255, 0.1);
        }

        body.light-mode .table {
            --bs-table-bg: var(--gray-light);
            --bs-table-color: var(--text-light);
            --bs-table-hover-bg: #e0e0e0;
            --bs-table-border-color: rgba(0, 0, 0, 0.1);
        }

        body:not(.light-mode) .table th {
            background-color: var(--gray-dark);
            color: white;
            font-weight: 600;
            text-transform: uppercase;
            padding: 12px 15px;
            border-bottom: 2px solid var(--purple-light);
        }

        body.light-mode .table th {
            background-color: var(--gray-light);
            color: var(--text-light);
            font-weight: 600;
            text-transform: uppercase;
            padding: 12px 15px;
            border-bottom: 2px solid var(--purple-light);
        }

        .table td {
            padding: 12px 15px;
            vertical-align: middle;
            border-bottom: 1px solid var(--bs-table-border-color);
            background-color: var(--bs-table-bg);
            color: var(--bs-table-color);
        }

        .table tbody tr:hover {
            background-color: var(--bs-table-hover-bg);
        }

        body.light-mode .table-hover tbody tr:hover {
            background-color: #e0e0e0 !important;
            color: var(--text-light) !important;
        }

        body.light-mode .table-hover tbody tr:hover td {
            background-color: #e0e0e0 !important;
            color: var(--text-light) !important;
        }

        .table tbody tr {
            transition: background-color 0.3s ease;
        }

        body.light-mode .table tbody tr:hover td,
        body.light-mode .table tbody tr:hover th {
            color: var(--text-light) !important;
        }

        body:not(.light-mode) .table tbody tr:hover td,
        body:not(.light-mode) .table tbody tr:hover th {
            color: white !important;
        }

        /* Chart Styles */
        .chart-container {
            background-color: var(--gray-dark);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .light-mode .chart-container {
            background-color: var(--gray-light);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .chart-header h2 {
            font-size: 1.5rem;
            color: var(--text-dark);
        }

        .light-mode .chart-header h2 {
            color: var(--text-light);
        }

        /* Top Products and Categories Section */
        .top-items-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .top-items-container {
            background-color: var(--gray-dark);
            border-radius: 12px;
            padding: 20px;
        }

        .light-mode .top-items-container {
            background-color: var(--gray-light);
        }

        .top-items-header {
            font-size: 1.5rem;
            color: var(--text-dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

        .top-items-header i {
            margin-right: 10px;
            color: var(--purple-light);
        }

        .light-mode .top-items-header {
            color: var(--text-light);
        }

        .top-item-card {
            display: flex;
            align-items: center;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .top-item-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .light-mode .top-item-card {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .top-item-rank {
            width: 35px;
            height: 35px;
            background-color: var(--purple-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
            color: white;
            margin-right: 15px;
        }

        .top-item-info {
            flex: 1;
        }

        .top-item-title {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-dark);
        }

        .light-mode .top-item-title {
            color: var(--text-light);
        }

        .top-item-subtitle {
            font-size: 0.9rem;
            color: #aaa;
        }

        .top-item-stats {
            text-align: right;
        }

        .top-item-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--purple-light);
        }

        .top-item-label {
            font-size: 0.9rem;
            color: #aaa;
        }

        .category-section {
            margin-bottom: 30px;
        }

        .category-header {
            font-size: 1.2rem;
            color: var(--text-dark);
            margin-bottom: 15px;
            border-bottom: 1px solid var(--purple-light);
            padding-bottom: 10px;
        }

        .light-mode .category-header {
            color: var(--text-light);
        }

        @media (max-width: 1024px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .report-stats {
                flex-direction: column;
            }

            .top-items-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .report-header,
            .chart-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .report-filters {
                flex-direction: column;
                width: 100%;
            }

            .custom-date {
                flex-direction: column;
            }
        }

        .form-select {
            background-color: var(--bg-dark);
            color: var(--text-dark);
            border: 1px solid var(--purple-light);
            position: relative;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            padding-right: 30px;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 16px;
        }

        .light-mode .form-select {
            background-color: var(--bg-light);
            color: var(--text-light);
            border: 1px solid #6a1b9a;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23333333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
        }

        .pagination .page-item.active .page-link {
            background-color: var(--purple-light) !important;
            border-color: var(--purple-light) !important;
            color: white !important;
        }

        .btn-download {
            background-color: #dc3545;
            border: none;
            transition: background-color 0.3s ease;
            color: white;
        }

        .btn-download:hover {
            background-color: #c82333;
        }
    </style>

    <div class="content">
        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-icon"><i class="bi bi-bag"></i></div>
                <div class="stat-card-content">
                    <h3>Total Orders</h3>
                    <div class="stat-number">
                        <%= stats.totalOrders %>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-card-icon"><i class="bi bi-clock"></i></div>
                <div class="stat-card-content">
                    <h3>Pending Orders</h3>
                    <div class="stat-number">
                        <%= stats.pendingOrders %>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-card-icon"><i class="bi bi-check-circle"></i></div>
                <div class="stat-card-content">
                    <h3>Delivered Orders</h3>
                    <div class="stat-number">
                        <%= stats.deliveredOrders %>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-card-icon"><i class="bi bi-arrow-counterclockwise"></i></div>
                <div class="stat-card-content">
                    <h3>Returned</h3>
                    <div class="stat-number">
                        <%= stats.returnedOrders %>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-card-icon"><i class="bi bi-x-circle"></i></div>
                <div class="stat-card-content">
                    <h3>Cancelled Orders</h3>
                    <div class="stat-number">
                        <%= stats.cancelledOrders %>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sales Report Section -->
        <div class="sales-report">
            <div class="report-header">
                <h2><i class="bi bi-graph-up"></i> Sales Report</h2>
                <div class="report-filters">
                    <select id="reportPeriod" class="form-select">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom Date</option>
                    </select>
                    <div id="customDateRange" class="custom-date" style="display: none;">
                        <input type="date" id="startDate" class="form-control" />
                        <input type="date" id="endDate" class="form-control" />
                    </div>
                    <button id="generateReport" class="btn btn-primary">Filter</button>
                    <button id="clearReport" class="btn btn-secondary">Clear</button>
                    <button id="downloadPDF" class="btn btn-download ">Download PDF</button>
                </div>
            </div>
            <div class="report-content">
                <div class="report-stats">
                    <div class="report-stat-card">
                        <h4>Overall Sales Count</h4>
                        <p id="salesCount">
                            <%= salesData.totalOrders %>
                        </p>
                    </div>
                    <div class="report-stat-card">
                        <h4>Overall Order Amount</h4>
                        <p id="orderAmount">₹ <%= salesData.totalAmount.toFixed(2) %>
                        </p>
                    </div>
                    <div class="report-stat-card">
                        <h4>Offer Discount</h4>
                        <p id="offerDiscountAmount">₹ <%= salesData.offerDiscount.toFixed(2) %>
                        </p>
                    </div>
                    <div class="report-stat-card">
                        <h4>Coupon Discount</h4>
                        <p id="couponDiscountAmount">₹ <%= salesData.couponDiscount.toFixed(2) %>
                        </p>
                    </div>
                    <div class="report-stat-card">
                        <h4>Overall Discount</h4>
                        <p id="discountAmount">₹ <%= salesData.totalDiscount.toFixed(2) %>
                        </p>
                    </div>
                </div>
                <div class="report-table">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Order ID</th>
                                <th>Amount</th>
                                <th>Discount</th>
                                <th>Coupon Applied</th>
                            </tr>
                        </thead>
                        <tbody id="salesTableBody">
                            <% orders.forEach(order=> { %>
                                <tr>
                                    <td>
                                        <%= new Date(order.createdAt).toLocaleDateString() %>
                                    </td>
                                    <td>
                                        <%= order.orderId %>
                                    </td>
                                    <td>
                                        ₹ <%= order.finalAmount.toFixed(2) %>
                                    </td>
                                    <td>
                                        ₹ <%= order.discount.toFixed(2) %>
                                    </td>
                                    <td>
                                        <%= order.couponApplied ? 'True' : 'False' %>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
                <!-- Pagination -->
                <div class="container mt-3">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mb-20">
                            <% for (let i=1; i <=totalPages; i++) { %>
                                <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>">
                                        <%= i %>
                                    </a>
                                </li>
                            <% } %>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
        <!-- Sales Chart Section -->
        <div class="chart-container">
            <div class="chart-header">
                <h2><i class="bi bi-bar-chart-line"></i> Sales Chart</h2>
                <div class="report-filters">
                    <select id="chartPeriod" class="form-select">
                        <option value="daily">Daily</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                    <button id="generateChart" class="btn btn-primary">Generate</button>
                    <!-- <button id="clearChart" class="btn btn-secondary">Clear</button> -->
                </div>
            </div>
            <canvas id="salesChart" height="100"></canvas>
        </div>


        <!-- Top Products and Categories Section -->

        <div class="top-items-grid">
            <!-- Top Products -->
            <div class="top-items-container">
                <h2 class="top-items-header"><i class="bi bi-award"></i> Top 7 Best Selling Products</h2>
                <% topProducts.forEach((product, index)=> { %>
                    <div class="top-item-card">
                        <div class="top-item-rank">
                            <%= index + 1 %>
                        </div>
                        <div class="top-item-info">
                            <div class="top-item-title">
                                <%= product.name %>
                            </div>
                            <div class="top-item-subtitle">In Stock: <%= product.quantityInStock %>
                            </div>
                        </div>
                        <div class="top-item-stats">
                            <div class="top-item-value">
                                <%= product.totalSold %>
                            </div>
                            <div class="top-item-label">Units Sold</div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Top Categories and Subcategories -->
            <div class="top-items-container">
                <h2 class="top-items-header"><i class="bi bi-grid-3x3-gap"></i> Top Categories & Subcategories</h2>

                <!-- Categories Section -->
                <div class="category-section">
                    <h3 class="category-header">Top 3 Categories</h3>
                    <% topCategories.forEach((category, index)=> { %>
                        <div class="top-item-card">
                            <div class="top-item-rank">
                                <%= index + 1 %>
                            </div>
                            <div class="top-item-info">
                                <div class="top-item-title">
                                    <%= category.name %>
                                </div>
                                <div class="top-item-subtitle">
                                    <%= category.description %>
                                </div>
                            </div>
                            <div class="top-item-stats">
                                <div class="top-item-value">
                                    <%= category.totalSold %>
                                </div>
                                <div class="top-item-label">Units Sold</div>
                            </div>
                        </div>
                    <% }) %>
                </div>

                <!-- Subcategories Section -->
                <div class="category-section">
                    <h3 class="category-header">Top 3 Subcategories</h3>
                    <% topSubcategories.forEach((subcategory, index)=> { %>
                        <div class="top-item-card">
                            <div class="top-item-rank">
                                <%= index + 1 %>
                            </div>
                            <div class="top-item-info">
                                <div class="top-item-title">
                                    <%= subcategory.name %>
                                </div>
                                <div class="top-item-subtitle">
                                    <%= subcategory.description %>
                                </div>
                            </div>
                            <div class="top-item-stats">
                                <div class="top-item-value">
                                    <%= subcategory.totalSold %>
                                </div>
                                <div class="top-item-label">Units Sold</div>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const reportPeriod = document.getElementById("reportPeriod");
            const customDateRange = document.getElementById("customDateRange");
            const generateReport = document.getElementById("generateReport");
            const clearReport = document.getElementById("clearReport");
            const salesCount = document.getElementById("salesCount");
            const orderAmount = document.getElementById("orderAmount");
            const offerDiscountAmount = document.getElementById("offerDiscountAmount");
            const couponDiscountAmount = document.getElementById("couponDiscountAmount");
            const discountAmount = document.getElementById("discountAmount");
            const salesTableBody = document.getElementById("salesTableBody");

            const chartPeriod = document.getElementById("chartPeriod");
            const generateChart = document.getElementById("generateChart");
            const clearChart = document.getElementById("clearChart");
            const salesChartCanvas = document.getElementById("salesChart");

            const downloadPDF = document.getElementById("downloadPDF");

            let salesChart;

            // Initialize Chart.js
            const initChart = (labels, data) => {
                if (salesChart) salesChart.destroy();
                salesChart = new Chart(salesChartCanvas, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Total Sales ($)',
                            data: data,
                            backgroundColor: 'rgba(106, 27, 154, 0.6)',
                            borderColor: 'rgba(106, 27, 154, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: { beginAtZero: true, title: { display: true,text: 'Sales Amount ($)' } },
                            x: { title: { display: true, text: 'Period' } }
                        },
                        plugins: {
                            legend: { display: true}
                        }
                    }
                });
            };

            // Fetch and render sales chart
            const fetchSalesChart = async (period) => {
                try {
                    const response = await fetch(`/admin/sales-chart?period=${period}`);
                    const data = await response.json();
                    initChart(data.labels, data.sales);
                } catch (error) {
                    console.error("Error fetching sales chart data:", error);
                }
            };

            // Show/hide custom date range for report
            reportPeriod.addEventListener("change", () => {
                customDateRange.style.display = reportPeriod.value === "custom" ? "flex" : "none";
            });

            // Fetch and render sales report
            generateReport.addEventListener("click", async () => {
                const period = reportPeriod.value;
                const startDate = document.getElementById("startDate").value;
                const endDate = document.getElementById("endDate").value;
                const page = new URLSearchParams(window.location.search).get("page") || 1;

                const query = new URLSearchParams({ period, page });
                if (period === "custom") {
                    query.append("startDate", startDate);
                    query.append("endDate", endDate);
                }

                try {
                    const response = await fetch(`/admin/sales-report?${query}`);
                    const data = await response.json();

                    salesCount.textContent = data.totalSalesCount;
                    orderAmount.textContent = `$${data.totalOrderAmount}`;
                    offerDiscountAmount.textContent = `$${data.offerDiscount}`;
                    couponDiscountAmount.textContent = `$${data.couponDiscount}`;
                    discountAmount.textContent = `$${data.totalDiscount}`;

                    salesTableBody.innerHTML = "";
                    data.orders.forEach((order) => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                        <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                        <td>${order.orderId}</td>
                        <td>$${order.finalAmount.toFixed(2)}</td>
                        <td>$${order.discount.toFixed(2)}</td>
                        <td>${order.couponApplied ? "True" : "False"}</td>`;
                        salesTableBody.appendChild(row);
                    });

                    const paginationContainer = document.querySelector(".pagination");
                    paginationContainer.innerHTML = "";
                    for (let i = 1; i <= data.totalPages; i++) {
                        const li = document.createElement("li");
                        li.className = `page-item ${i === data.currentPage ? "active" : ""}`;
                        li.innerHTML = `<a class="page-link" href="?page=${i}">${i}</a>`;
                        paginationContainer.appendChild(li);
                    }
                } catch (error) {
                    console.error("Error fetching sales report:", error);
                }
            });

            // Generate chart on button click
            generateChart.addEventListener("click", () => {
                const period = chartPeriod.value;
                fetchSalesChart(period);
            });

            // Clear chart
            // clearChart.addEventListener("click", () => {
            //     if (salesChart) salesChart.destroy();
            //     salesChartCanvas.getContext('2d').clearRect(0, 0, salesChartCanvas.width, salesChartCanvas.height);
            // });

            // Clear report
            clearReport.addEventListener("click", () => {
                location.reload();
            });

            // Load daily chart by default
            fetchSalesChart("daily");

            // Generate PDF
            document.getElementById("downloadPDF").addEventListener("click", async () => {
                try {
                    if (!window.jspdf) {
                        console.error("jsPDF library not loaded");
                        alert("Error: PDF generation library not loaded. Please try again.");
                        return;
                    }

                    // Get filter values
                    const period = document.getElementById("reportPeriod").value;
                    const startDate = document.getElementById("startDate").value;
                    const endDate = document.getElementById("endDate").value;

                    // Build query parameters
                    const query = new URLSearchParams({ period });
                    if (period === "custom" && startDate && endDate) {
                        query.append("startDate", startDate);
                        query.append("endDate", endDate);
                    }

                    // Fetch filtered sales data
                    const response = await fetch(`/admin/sales-report?${query}`);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch sales report data: ${response.statusText}`);
                    }
                    const data = await response.json();

                    // Log response for debugging
                    console.log("Sales report response:", data);

                    // Validate totalSalesCount
                    const totalSalesCount = Number(data.totalSalesCount) || 0;
                    if (data.orders.length === 0 && totalSalesCount !== 0) {
                        console.warn("Mismatch: No orders found but totalSalesCount is not 0. Forcing to 0.");
                        data.totalSalesCount = 0;
                    }

                    // Initialize jsPDF
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({
                        unit: 'in',
                        format: 'a4',
                        orientation: 'portrait',
                        compress: true,
                        putOnlyUsedFonts: true,
                        precision: 16
                    });

                    // Page dimensions (A4: 8.27in x 11.69in)
                    const pageWidth = 8.27;
                    const pageHeight = 11.69;
                    const margin = 0.75;
                    const maxWidth = pageWidth - 2 * margin;

                    // Set font
                    doc.setFont("Helvetica", "normal");

                    // Header: SALES REPORT and INIZIO logo
                    doc.setFontSize(28);
                    doc.setFont("Helvetica", "bold");
                    doc.setTextColor(44, 44, 44); // #2c2c2c
                    doc.text("SALES REPORT", margin, 0.75);

                    // Logo: INIZIO text in a circle
                    doc.setFillColor(245, 245, 245); // #f5f5f5
                    doc.circle(pageWidth - margin - 0.35, 0.65, 0.35, "F");
                    doc.setFontSize(10);
                    doc.setTextColor(102, 102, 102); // #666
                    doc.setFont("Helvetica", "bold");
                    doc.text("INIZIO", pageWidth - margin - 0.35, 0.7, { align: "center" });

                    // Header border
                    doc.setLineWidth(0.02);
                    doc.setDrawColor(249, 109, 0); // #F96D00
                    doc.line(margin, 1.1, pageWidth - margin, 1.1);

                    // Table Header
                    let y = 1.4;
                    doc.setFontSize(14);
                    doc.setTextColor(44, 44, 44); // #2c2c2c
                    doc.setFont("Helvetica", "bold");
                    doc.text("Sales Details", margin, y);
                    y += 0.3;

                    // Define column widths
                    const columnWidths = [1.2, 2.8, 1.0, 1.0, 0.8];
                    const headers = ["Date", "Order ID", "Amount", "Discount", "Coupon"];
                    doc.setFontSize(11);
                    doc.setTextColor(255, 255, 255); // White
                    doc.setFillColor(249, 109, 0); // #F96D00
                    doc.rect(margin, y, maxWidth, 0.3, "F"); // Table header background
                    let x = margin;
                    headers.forEach((header, index) => {
                        const align = index >= 2 ? "right" : index === 4 ? "center" : "left";
                        const offset = align === "right" ? columnWidths[index] - 0.1 : align === "center" ? columnWidths[index] / 2 : 0.1;
                        doc.text(header, x + offset, y + 0.2, {
                            align: align,
                            maxWidth: columnWidths[index] - 0.2
                        });
                        x += columnWidths[index];
                    });
                    y += 0.3;

                    // Table Rows
                    const rows = data.orders.map(order => [
                        new Date(order.createdAt).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }),
                        order.orderId,
                        `$${order.finalAmount.toFixed(2)}`,
                        `$${order.discount.toFixed(2)}`,
                        order.couponApplied ? "True" : "False"
                    ]);

                    let tableBottomY = y;
                    let tableTopY = 1.7; // Track the top of the table for vertical lines
                    if (rows.length === 0) {
                        doc.setFontSize(14);
                        doc.setTextColor(102, 102, 102);
                        doc.setFont("Helvetica", "bold");
                        doc.text("No orders available for the selected period.", margin, y + 0.2);
                        tableBottomY = y + 0.3;
                    } else {
                        doc.setFontSize(10);
                        doc.setTextColor(51, 51, 51);
                        doc.setFont("Helvetica", "normal");
                        rows.forEach((row, index) => {
                            // Check if we need a new page
                            if (y + 0.3 > pageHeight - margin - 1.5) {
                                // Draw grid for the current page
                                doc.setDrawColor(221, 221, 221);
                                doc.setLineWidth(0.01);
                                // Vertical lines
                                x = margin;
                                columnWidths.forEach((width) => {
                                    doc.line(x, tableTopY, x, tableBottomY);
                                    x += width;
                                });
                                doc.line(pageWidth - margin, tableTopY, pageWidth - margin, tableBottomY);
                                // Horizontal lines
                                let tempY = tableTopY;
                                while (tempY <= tableBottomY) {
                                    doc.line(margin, tempY, pageWidth - margin, tempY);
                                    tempY += 0.3;
                                }

                                doc.addPage();
                                y = margin;
                                tableBottomY = y;
                                tableTopY = y + 0.3; // Update for new page

                                // Redraw table header on new page
                                doc.setFontSize(14);
                                doc.setTextColor(44, 44, 44);
                                doc.setFont("Helvetica", "bold");
                                doc.text("Sales Details (Continued)", margin, y);
                                y += 0.3;
                                doc.setFontSize(11);
                                doc.setTextColor(255, 255, 255);
                                doc.setFillColor(249, 109, 0);
                                doc.rect(margin, y, maxWidth, 0.3, "F");
                                x = margin;
                                headers.forEach((header, i) => {
                                    const align = i >= 2 ? "right" : i === 4 ? "center" : "left";
                                    const offset = align === "right" ? columnWidths[i] - 0.1 : align === "center" ? columnWidths[i] / 2 : 0.1;
                                    doc.text(header, x + offset, y + 0.2, {
                                        align: align,
                                        maxWidth: columnWidths[i] - 0.2
                                    });
                                    x += columnWidths[i];
                                });
                                y += 0.3;
                                tableBottomY = y;
                            }

                            x = margin;
                            row.forEach((cell, cellIndex) => {
                                const align = cellIndex >= 2 ? "right" : cellIndex === 4 ? "center" : "left";
                                const offset = align === "right" ? columnWidths[cellIndex] - 0.1 : align === "center" ? columnWidths[cellIndex] / 2 : 0.1;
                                doc.text(cell, x + offset, y + 0.2, {
                                    align: align,
                                    maxWidth: columnWidths[cellIndex] - 0.2
                                });
                                x += columnWidths[cellIndex];
                            });
                            y += 0.3;
                            tableBottomY = y;
                        });

                        // Draw table grid after all rows
                        doc.setDrawColor(221, 221, 221);
                        doc.setLineWidth(0.01);
                        // Vertical lines
                        x = margin;
                        columnWidths.forEach((width) => {
                            doc.line(x, tableTopY, x, tableBottomY);
                            x += width;
                        });
                        doc.line(pageWidth - margin, tableTopY, pageWidth - margin, tableBottomY);
                        // Horizontal lines
                        let tempY = tableTopY;
                        while (tempY <= tableBottomY) {
                            doc.line(margin, tempY, pageWidth - margin, tempY);
                            tempY += 0.3;
                        }
                    }

                    // Draw table grid for empty table
                    if (rows.length === 0) {
                        doc.setDrawColor(221, 221, 221);
                        doc.setLineWidth(0.01);
                        x = margin;
                        columnWidths.forEach((width) => {
                            doc.line(x, 1.7, x, tableBottomY);
                            x += width;
                        });
                        doc.line(pageWidth - margin, 1.7, pageWidth - margin, tableBottomY);
                        doc.line(margin, 1.7, pageWidth - margin, 1.7);
                        doc.line(margin, tableBottomY, pageWidth - margin, tableBottomY);
                    }

                    // Summary Section
                    if (tableBottomY + 1.5 > pageHeight - margin) {
                        doc.addPage();
                        tableBottomY = margin;
                    }
                    // Increase spacing when no orders are available
                    y = rows.length === 0 ? tableBottomY + 1.0 : tableBottomY + 0.6; // More spacing when no orders
                    doc.setFontSize(12);
                    doc.setTextColor(85, 85, 85); // #555
                    doc.setFont("Helvetica", "normal");

                    // Debug y position and totalSalesCount
                    console.log("Rendering summary at y:", y, "totalSalesCount:", data.totalSalesCount);

                    // Format summary values
                    const totalOrderAmount = parseFloat(data.totalOrderAmount || 0).toFixed(2);
                    const offerDiscount = parseFloat(data.offerDiscount || 0).toFixed(2);
                    const couponDiscount = parseFloat(data.couponDiscount || 0).toFixed(2);
                    const totalDiscount = parseFloat(data.totalDiscount || 0).toFixed(2);

                    // Render summary with explicit validation
                    doc.text(`Overall Sales Count: ${data.totalSalesCount || 0}`, margin, y);
                    y += 0.25;
                    doc.text(`Offer Discount: $${offerDiscount}`, margin, y);
                    y += 0.25;
                    doc.text(`Coupon Discount: $${couponDiscount}`, margin, y);
                    y += 0.25;
                    doc.text(`Overall Discount: $${totalDiscount}`, margin, y);
                    y += 0.25;
                    doc.setFont("Helvetica", "bold");
                    doc.setFillColor(249, 109, 0); // #F96D00
                    doc.setTextColor(255, 255, 255); // White
                    doc.rect(margin, y, 3.5, 0.3, "F");
                    doc.text(`Overall Order Amount: $${totalOrderAmount}`, margin + 0.1, y + 0.2);

                    // Save the PDF
                    doc.save(`sales_report_${new Date().toISOString().split('T')[0]}.pdf`);
                } catch (error) {
                    console.error("Error generating PDF:", error);
                    alert("Failed to generate PDF: " + error.message);
                }
            });
        });
    </script>

<%- include("../../views/partials/admin/footer.ejs") %>